#! /bin/bash
# FS QA Test No. 104
#
# XFS online growfs-while-allocating tests (data subvol variant)
#
#-----------------------------------------------------------------------
# Copyright (c) 2000-2004 Silicon Graphics, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#
# creator
owner=nathans@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

_create_scratch()
{
	echo "*** mkfs"
	_scratch_mkfs_xfs $@ | tee -a $seq.full | _filter_mkfs 2>$tmp.mkfs
	. $tmp.mkfs

	echo "*** mount"
	if ! _scratch_mount 2>/dev/null
	then
		echo "failed to mount $SCRATCH_DEV"
		exit 1
	fi

	# fix the reserve block pool to a known size so that the enospc
	# calculations work out correctly.
	_scratch_resvblks 1024 >  /dev/null 2>&1
}

_fill_scratch()
{
	$XFS_IO_PROG -f -c "resvsp 0 ${1}" $SCRATCH_MNT/resvfile
}

_stress_scratch()
{
	procs=3
	nops=1000
	# -w ensures that the only ops are ones which cause write I/O
	$FSSTRESS_PROG -d $SCRATCH_MNT -w -p $procs -n $nops $FSSTRESS_AVOID > /dev/null &
}

# real QA test starts here
_supported_fs xfs
_require_scratch
_scratch_mkfs_xfs | tee -a $seq.full | _filter_mkfs 2>$tmp.mkfs
. $tmp.mkfs	# extract blocksize and data size for scratch device

endsize=`expr 550 \* 1048576`	# stop after growing this big
incsize=`expr  42 \* 1048576`	# grow in chunks of this size
modsize=`expr   4 \* $incsize`	# pause after this many increments

[ `expr $endsize / $dbsize` -lt $dblocks ] || _notrun "Scratch device too small"

nags=4
size=`expr 120 \* 1048576`	# 120 megabytes initially
sizeb=`expr $size / $dbsize`	# in data blocks
echo "*** creating scratch filesystem"
_create_scratch -dsize=${size} -dagcount=${nags}

fillsize=`expr 110 \* 1048576`	# 110 megabytes of filling
echo "*** using some initial space on scratch filesystem"
_fill_scratch $fillsize

#
# Grow the filesystem while actively stressing it...
# Kick off more stress threads on each iteration, grow; repeat.
#
while [ $size -le $endsize ]; do
	echo "*** stressing a ${size} byte filesystem"
	echo "*** stressing a ${sizeb} block filesystem" >> $seq.full
	_stress_scratch
	sleep 1
	size=`expr $size + $incsize`
	sizeb=`expr $size / $dbsize`	# in data blocks
	echo "*** growing to a ${size} byte filesystem"
	echo "*** growing to a ${sizeb} block filesystem" >> $seq.full
	xfs_growfs -D ${sizeb} $SCRATCH_MNT \
		| tee -a $seq.full | _filter_mkfs 2>$tmp.growfs
	. $tmp.growfs
	[ `expr $size % $modsize` -eq 0 ] && wait	# every 4th iteration
	echo AGCOUNT=$agcount | tee -a $seq.full
	echo && echo >> $seq.full
done
wait	# stop for any remaining stress processes

umount $SCRATCH_DEV
_check_scratch_fs

status=0
exit
