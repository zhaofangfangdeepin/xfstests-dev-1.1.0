#! /bin/bash
# FS QA Test No. 148
#
# Exercise xfs parallel repair on broken filesystems
# This is a clone of test 030 useing xfs_prepair64 instead of xfs_repair
#
#-----------------------------------------------------------------------
# Copyright (c) 2006 Silicon Graphics, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#
# creator
owner=ddiss@sgi.com

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!

_cleanup()
{
	cd /
	umount $SCRATCH_DEV 2>/dev/null
	rm -f $tmp.*
}

trap "_cleanup; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common.rc
. ./common.filter
. ./common.repair

[ -z "$XFS_PARALLEL_REPAIR64_PROG" ] && _notrun "parallel repair binary xfs_prepair64 is not installed"

# force use of parallel repair
export XFS_REPAIR_PROG=$XFS_PARALLEL_REPAIR64_PROG

# nuke the superblock, AGI, AGF, AGFL; then try repair the damage
# 
_check_ag()
{
	for structure in 'sb 0' 'agf 0' 'agi 0' 'agfl 0'
	do
		echo "Corrupting $structure - setting bits to $1"
		_check_repair $1 "$structure"
	done
}

# real QA test starts here
_supported_fs xfs
_supported_os IRIX Linux

_require_nobigloopfs
_require_scratch

DSIZE="-dsize=100m"

# first we need to ensure there are no bogus secondary
# superblocks between the primary and first secondary
# superblock (hanging around from earlier tests)...
#

_scratch_mkfs_xfs $DSIZE >/dev/null 2>&1
if [ $? -ne 0 ]		# probably don't have a big enough scratch
then
	_notrun "SCRATCH_DEV too small, results would be non-deterministic"
else
	_scratch_mount
	src/feature -U $SCRATCH_DEV && \
		_notrun "UQuota are enabled, test needs controlled sb recovery"
	src/feature -G $SCRATCH_DEV && \
		_notrun "GQuota are enabled, test needs controlled sb recovery"
	src/feature -P $SCRATCH_DEV && \
		_notrun "PQuota are enabled, test needs controlled sb recovery"
	umount $SCRATCH_DEV
fi
clear=""
eval `xfs_db -r -c "sb 1" -c stack $SCRATCH_DEV | $PERL_PROG -ne '
	if (/byte offset (\d+), length (\d+)/) {
		print "clear=", $1 / 512, "\n"; exit
	}'`
[ -z "$clear" ] && echo "Cannot calculate length to clear"
src/devzero -v -1 -n "$clear" $SCRATCH_DEV >/dev/null

# now kick off the real prepair test...
#
_scratch_mkfs_xfs $DSIZE | _filter_mkfs 2>$tmp.mkfs
. $tmp.mkfs
_check_ag 0
_check_ag -1


# success, all done
status=0
exit
