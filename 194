#! /bin/bash
# FS QA Test No. 194
#
# Test mapping around/over holes for sub-page blocks
#
#-----------------------------------------------------------------------
# Copyright (c) 2008 Eric Sandeen.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#
# creator
owner=sandeen@sandeen.net

seq=`basename $0`
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
    cd /
    rm -f $tmp.*
}

# get standard environment, filters and checks
. ./common.rc
. ./common.filter

# only xfs supported due to use of xfs_bmap
_supported_fs xfs
_supported_os IRIX Linux

# real QA test starts here
rm -f $seq.full

# For this test we use block size = 1/8 page size
pgsize=`$here/src/feature -s`
blksize=`expr $pgsize / 8`

# Filter out file mountpoint and physical location info
# Input:
#  EXT: FILE-OFFSET      BLOCK-RANGE      AG AG-OFFSET        TOTAL
#  0: [0..63]:         160..223          0 (160..223)          64
#  1: [64..127]:       hole                                    64
# Output:
#  SCRATCH_MNT/testfile4:	TYPE
#  EXT:	TYPE	TOTAL
#  0:	blocks	1
#  1:	hole	1

_filter_bmap()
{
    tee -a $seq.full | \
    sed "s#$SCRATCH_MNT#SCRATCH_MNT#g" | \
    awk \
        '$3 ~ /hole/     { print $1 "\t" $3 "\t" ($4 * 512) / blksize; next }
         $1 ~ /^[0-9]/   { print $1 "\tblocks\t" ($6 * 512) / blksize; next }
         $1 ~ /^SCRATCH/ { print $1; next }
         	         { print $1 "\tTYPE\t" $6 }' blksize=$blksize
}

# Filter out offsets, which vary by blocksize
_filter_od()
{
    tee -a $seq.full | \
    sed -e "s/^[0-9A-Fa-f ]\{7,8\}//"
}

_require_scratch
unset MKFS_OPTIONS
unset XFS_MKFS_OPTIONS
_scratch_mkfs_xfs -b size=$blksize >/dev/null 2>&1
_scratch_mount

# 512b block / 4k page example:
#
#1) Write 1k of data (buffered):
#
# |1111|1111|
#
# 2) ftruncate back to 256 bytes:
#
# |1100|
#
# 3) ftruncate out to 4k: ("H" means hole (expected))
#
# |1100|HHHH|HHHH|HHHH|HHHH|HHHH|HHHH|HHHH|
#
# So we should have 1 block of data/0, 7 blocks of holes.
#
# 4) check what's there with a direct IO read
#
# In fact what I get is 1 block of data/0, 1 block of 0's, and 7 blocks of
# garbage:
#
# |1100|0000|GGGG|GGGG|GGGG|GGGG|GGGG|GGGG|
#
# The garbage is in fact stale data from the disk.
#
# Check that we don't get stale data and that the hole is a hole:

echo "== Test 1 =="
# Write, truncate in, truncate out
xfs_io \
-c "pwrite -S 0x11 -b `expr $pgsize / 2`  0 `expr $pgsize / 2`" \
-c "truncate `expr $blksize / 2`" \
-c "truncate $pgsize" \
-t -f $SCRATCH_MNT/testfile1 >> $seq.full

# directio read of entire file
xfs_io \
-c "pread 0 $pgsize" \
-d $SCRATCH_MNT/testfile1 >> $seq.full

xfs_bmap -v $SCRATCH_MNT/testfile1 | _filter_bmap
od -x $SCRATCH_MNT/testfile1 | _filter_od

# Similar but write another block to create block/hole/block/hole

echo "== Test 2 =="
# Write, truncate in, truncate out, write to middle
xfs_io \
-c "pwrite -S 0x11 -b `expr $pgsize / 2`  0 `expr $pgsize / 2`" \
-c "truncate `expr $blksize / 2`" \
-c "truncate $pgsize" \
-c "pwrite -S 0x22 -b $blksize `expr $blksize \* 4` $blksize" \
-t -f $SCRATCH_MNT/testfile2 >> $seq.full

# directio read of entire file
xfs_io \
-c "pread 0 $pgsize" \
-d $SCRATCH_MNT/testfile2 >> $seq.full

xfs_bmap -v $SCRATCH_MNT/testfile2 | _filter_bmap
od -x $SCRATCH_MNT/testfile2 | _filter_od

# 512 byte block / 4k page example:

# direct write 1 page (8 blocks) of "0x11" to 0x1000
# map read 1 block, 512 (0x200) at 0
# truncate to half a block, 256 (0x100)
# truncate to block+1, 513 (0x201)
# direct write "0x22" for 1 block at offset 2048 (0x800)

# |1111|1111|1111|1111|1111|1111|1111|1111|     Write 1's
# |MRMR|1111|1111|1111|1111|1111|1111|1111|     mapread
# |11--|                                        truncate down
# |1100|0---|                                   truncate up, block+1
# |    |    |HHHH|HHHH|2222|                    Write 2's (extending)

#           |uptodate?|
# |1100|0000|1111|1111|2222|----|----|----| 	<- potential badness

# We're looking for this badness due to mapping over a hole:
# Exposes stale data from 0x400 (1024) through 0x800 (2048)

# 00000000  11 11 11 11 11 11 11 11  11 11 11 11 11 11 11 11  |................|
# *
# 00000100  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
# *
# 00000400  11 11 11 11 11 11 11 11  11 11 11 11 11 11 11 11  |................| <- BAD
# *
# 00000800  22 22 22 22 22 22 22 22  22 22 22 22 22 22 22 22  |""""""""""""""""|
# *
# 00000a00

# We *should* get:
# |1100|HHHH|HHHH|HHHH|2222|----|----|----|

echo "== Test 3 =="
xfs_io \
-c "pwrite -S 0x11 -b $pgsize 0 $pgsize" \
-c "mmap -r 0 $blksize" -c "mread 0 $blksize" -c "munmap" \
-c "truncate `expr $blksize / 2`" \
-c "truncate `expr $blksize + 1`" \
-c "pwrite -S 0x22 -b $blksize `expr $pgsize / 2` $blksize" \
-t -d -f $SCRATCH_MNT/testfile3 >> $seq.full

xfs_bmap -v $SCRATCH_MNT/testfile3 | _filter_bmap
od -x $SCRATCH_MNT/testfile3 | _filter_od

# Now try the same thing but write a sector in the middle of that hole
# If things go badly stale data will be exposed either side.
# This is most interesting for block size > 512 (page size > 4096)

# We *should* get:
# |1100|HHHH|33HH|HHHH|2222|----|----|----|

echo "== Test 4 =="
xfs_io \
-c "pwrite -S 0x11 -b $pgsize 0 $pgsize" \
-c "mmap -r 0 $blksize" -c "mread 0 $blksize" -c "munmap" \
-c "truncate `expr $blksize / 2`" \
-c "truncate `expr $blksize + 1`" \
-c "pwrite -S 0x22 -b $blksize `expr $pgsize / 2` $blksize" \
-c "pwrite -S 0x33 -b 512 `expr $blksize \* 2` 512" \
-t -d -f $SCRATCH_MNT/testfile4 >> $seq.full

xfs_bmap -v $SCRATCH_MNT/testfile4 | _filter_bmap
od -x $SCRATCH_MNT/testfile4 | _filter_od

# success, all done
status=0
exit
